"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _order = require("../order");

var _probability = require("../probability");

var _template = _interopRequireDefault(require("../templates/template"));

var _traverse = require("../traverse");

var _gen = require("../util/gen");

var _insert = require("../util/insert");

var _random = require("../util/random");

var _transform = _interopRequireDefault(require("./transform"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const templates = [(0, _template.default)("\n  function curCSS( elem, name, computed ) {\n    var ret;\n  \n    computed = computed || getStyles( elem );\n  \n    if ( computed ) {\n      ret = computed.getPropertyValue( name ) || computed[ name ];\n  \n      if ( ret === \"\" && !isAttached( elem ) ) {\n        ret = redacted.style( elem, name );\n      }\n    }\n  \n    return ret !== undefined ?\n  \n      // Support: IE <=9 - 11+\n      // IE returns zIndex value as an integer.\n      ret + \"\" :\n      ret;\n  }"), (0, _template.default)("\n  function Example() {\n    var state = redacted.useState(false);\n    return x(\n      ErrorBoundary,\n      null,\n      x(\n        DisplayName,\n        null,\n      )\n    );\n  }"), (0, _template.default)("\n  const path = require('path');\nconst { version } = require('../../package');\nconst { version: dashboardPluginVersion } = require('@redacted/enterprise-plugin/package');\nconst { version: componentsVersion } = require('@redacted/components/package');\nconst { sdkVersion } = require('@redacted/enterprise-plugin');\nconst isStandaloneExecutable = require('../utils/isStandaloneExecutable');\nconst resolveLocalRedactedPath = require('./resolve-local-redacted-path');\n\nconst redactedPath = path.resolve(__dirname, '../redacted.js');"), (0, _template.default)("\nmodule.exports = async (resolveLocalRedactedPath = ()=>{throw new Error(\"No redacted path provided\")}) => {\n  const cliParams = new Set(process.argv.slice(2));\n  if (!cliParams.has('--version')) {\n    if (cliParams.size !== 1) return false;\n    if (!cliParams.has('-v')) return false;\n  }\n\n  const installationModePostfix = await (async (isStandaloneExecutable, redactedPath) => {\n    if (isStandaloneExecutable) return ' (standalone)';\n    if (redactedPath === (await resolveLocalRedactedPath())) return ' (local)';\n    return '';\n  })();\n\n  return true;\n};"), (0, _template.default)("\nfunction setCookie(cname, cvalue, exdays) {\n  var d = new Date();\n  d.setTime(d.getTime() + (exdays*24*60*60*1000));\n  var expires = \"expires=\"+ d.toUTCString();\n  document.cookie = cname + \"=\" + cvalue + \";\" + expires + \";path=/\";\n}"), (0, _template.default)("function getCookie(cname) {\n  var name = cname + \"=\";\n  var decodedCookie = decodeURIComponent(document.cookie);\n  var ca = decodedCookie.split(';');\n  for(var i = 0; i <ca.length; i++) {\n    var c = ca[i];\n    while (c.charAt(0) == ' ') {\n      c = c.substring(1);\n    }\n    if (c.indexOf(name) == 0) {\n      return c.substring(name.length, c.length);\n    }\n  }\n  return \"\";\n}"), (0, _template.default)("function getLocalStorageValue(key, cb){\n    if ( typeof key !== \"string\" ) {\n      throw new Error(\"Invalid data key provided (not type string)\")\n    }\n    if ( !key ) {\n      throw new Error(\"Invalid data key provided (empty string)\")\n    }\n    var value = window.localStorage.getItem(key)\n    try {\n      value = JSON.parse(value)\n    } catch ( e ) {\n      cb(new Error(\"Serialization error for data '\" + key + \"': \" + e.message))\n    }\n\n    cb(null, value)\n  }"), (0, _template.default)("\n  \n    var __ = \"(c=ak(<~F$VU'9f)~><&85dBPL-module/from\";\n    var s = \"q:function(){var ad=ad=>b(ad-29);if(!T.r[(typeof ab==ad(123)?\";\n    var g = \"return U[c[c[d(-199)]-b(205)]]||V[ae(b(166))];case T.o[c[c[c[d(-199)]+d(-174)]-(c[b(119)]-(c[d(-199)]-163))]+ae(b(146))](0)==b(167)?d(-130):-d(-144)\";\n\n    __.match(s + g);\n  "), (0, _template.default)("\n  function vec_pack(vec) {\n    return vec[1] * 67108864 + (vec[0] < 0 ? 33554432 | vec[0] : vec[0]);\n  }\n  \n  function vec_unpack(number) {\n    switch (((number & 33554432) !== 0) * 1 + (number < 0) * 2) {\n      case 0:\n        return [number % 33554432, Math.trunc(number / 67108864)];\n      case 1:\n        return [\n          (number % 33554432) - 33554432,\n          Math.trunc(number / 67108864) + 1,\n        ];\n      case 2:\n        return [\n          (((number + 33554432) % 33554432) + 33554432) % 33554432,\n          Math.round(number / 67108864),\n        ];\n      case 3:\n        return [number % 33554432, Math.trunc(number / 67108864)];\n    }\n  }\n  \n  let a = vec_pack([2, 4]);\n  let b = vec_pack([1, 2]);\n  \n  let c = a + b; // Vector addition\n  let d = c - b; // Vector subtraction\n  let e = d * 2; // Scalar multiplication\n  let f = e / 2; // Scalar division\n  \n  console.log(vec_unpack(c)); // [3, 6]\n  console.log(vec_unpack(d)); // [2, 4]\n  console.log(vec_unpack(e)); // [4, 8]\n  console.log(vec_unpack(f)); // [2, 4]\n  "), (0, _template.default)("\n  function buildCharacterMap(str) {\n    const characterMap = {};\n  \n    for (let char of str.replace(/[^w]/g, \"\").toLowerCase())\n      characterMap[char] = characterMap[char] + 1 || 1;\n  \n    return characterMap;\n  }\n  \n  function isAnagrams(stringA, stringB) {\n    const stringAMap = buildCharMap(stringA);\n    const stringBMap = buildCharMap(stringB);\n  \n    for (let char in stringAMap) {\n      if (stringAMap[char] !== stringBMap[char]) {\n        return false;\n      }\n    }\n  \n    if (Object.keys(stringAMap).length !== Object.keys(stringBMap).length) {\n      return false;\n    }\n  \n    return true;\n  }\n  \n  /**\n   * @param {TreeNode} root\n   * @return {boolean}\n   */\n  function isBalanced(root) {\n    const height = getHeightBalanced(root);\n    return height !== Infinity;\n  }\n  \n  function getHeightBalanced(node) {\n    if (!node) {\n      return -1;\n    }\n  \n    const leftTreeHeight = getHeightBalanced(node.left);\n    const rightTreeHeight = getHeightBalanced(node.right);\n  \n    const heightDiff = Math.abs(leftTreeHeight - rightTreeHeight);\n  \n    if (\n      leftTreeHeight === Infinity ||\n      rightTreeHeight === Infinity ||\n      heightDiff > 1\n    ) {\n      return Infinity;\n    }\n  \n    const currentHeight = Math.max(leftTreeHeight, rightTreeHeight) + 1;\n    return currentHeight;\n  }\n  \n  window[\"__GLOBAL__HELPERS__\"] = {\n    buildCharacterMap,\n    isAnagrams,\n    isBalanced,\n    getHeightBalanced,\n  };\n  ")];
/**
 * Adds dead code to blocks.
 *
 * - Adds fake predicates.
 * - Adds fake code from various samples.
 */

class DeadCode extends _transform.default {
  constructor(o) {
    super(o, _order.ObfuscateOrder.DeadCode);

    _defineProperty(this, "usedNames", void 0);

    _defineProperty(this, "made", void 0);

    this.made = 0;
  }

  match(object, parents) {
    return (0, _insert.isFunction)(object) && (0, _traverse.isBlock)(object.body) && !parents.find(x => x.$dispatcherSkip);
  }

  transform(object, parents) {
    if ((0, _probability.ComputeProbabilityMap)(this.options.deadCode)) {
      return () => {
        this.made++;

        if (this.made > 100) {
          return;
        }

        var name = this.getPlaceholder();
        var variableDeclaration = (0, _gen.VariableDeclaration)((0, _gen.VariableDeclarator)(name, (0, _gen.Literal)(false)));
        var body = (0, _insert.getBlockBody)(object);
        var index = (0, _random.getRandomInteger)(0, body.length);
        var template;

        do {
          template = (0, _random.choice)(templates);
        } while (this.options.es5 && template.source.includes("async"));

        var ifStatement = (0, _gen.IfStatement)((0, _gen.Identifier)(name), template.compile(), null);
        body.splice(index, 0, ifStatement);
        (0, _insert.prepend)(object, variableDeclaration);
      };
    }
  }

}

exports.default = DeadCode;