"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _constants = require("../constants");

var _order = require("../order");

var _traverse = _interopRequireWildcard(require("../traverse"));

var _gen = require("../util/gen");

var _identifiers = require("../util/identifiers");

var _insert = require("../util/insert");

var _random = require("../util/random");

var _transform = _interopRequireDefault(require("./transform"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * Brings every function to the global level.
 *
 * Functions take parameters, input, have a return value and return modified changes to the scoped variables.
 *
 * ```js
 * function topLevel(ref1, ref2, refN, param1, param2, paramN){
 *   return [ref1, ref2, refN, returnValue];
 * }
 * ```
 */
class Flatten extends _transform.default {
  constructor(o) {
    super(o, _order.ObfuscateOrder.Flatten);

    _defineProperty(this, "definedNames", void 0);

    _defineProperty(this, "flatMapName", void 0);

    _defineProperty(this, "flatNode", void 0);

    _defineProperty(this, "gen", void 0);

    this.definedNames = new Map();
    this.flatMapName = null;
    this.flatNode = null;
    this.gen = this.getGenerator();
  }

  apply(tree) {
    (0, _traverse.default)(tree, (o, p) => {
      if (o.type == "Identifier" && !_constants.reservedIdentifiers.has(o.name) && !this.options.globalVariables.has(o.name)) {
        var info = (0, _identifiers.getIdentifierInfo)(o, p);

        if (info.spec.isReferenced) {
          if (info.spec.isDefined) {
            var c = (0, _insert.getVarContext)(o, p);

            if (c) {
              if (!this.definedNames.has(c)) {
                this.definedNames.set(c, new Set([o.name]));
              } else {
                this.definedNames.get(c).add(o.name);
              }
            }
          }
        }
      }
    });
    super.apply(tree);
  }

  match(object, parents) {
    return object.type == "FunctionDeclaration" && object.body.type == "BlockStatement" && !object.generator && !object.async && !object.params.find(x => x.type !== "Identifier");
  }

  transform(object, parents) {
    return () => {
      //
      if (parents.find(x => x.type == "ClassExpression" || x.type == "ClassDeclaration" || x.type == "MethodDefinition")) {
        return;
      }

      var defined = new Set();
      var references = new Set();
      var modified = new Set();
      var illegal = new Set();
      var isIllegal = false;
      var definedAbove = new Set(this.options.globalVariables);
      parents.forEach(x => {
        var set = this.definedNames.get(x);

        if (set) {
          set.forEach(name => definedAbove.add(name));
        }
      });
      (0, _traverse.walk)(object, parents, (o, p) => {
        if (object.id && o === object.id) {
          return;
        }

        if (o.type == "Identifier" && !this.options.globalVariables.has(o.name) && !_constants.reservedIdentifiers.has(o.name)) {
          var info = (0, _identifiers.getIdentifierInfo)(o, p);

          if (!info.spec.isReferenced) {
            return;
          }

          if (o.hidden) {
            illegal.add(o.name);
          }

          if (info.spec.isDefined) {
            defined.add(o.name);
          } else if (info.spec.isModified) {
            modified.add(o.name);
          } else {
            references.add(o.name);
          }
        }

        if (o.type == "TryStatement") {
          isIllegal = true;
          return "EXIT";
        }

        if (o.type == "Identifier") {
          if (o.name == "arguments") {
            isIllegal = true;
            return "EXIT";
          }
        }

        if (o.type == "ThisExpression") {
          isIllegal = true;
          return "EXIT";
        }

        if (o.type == "Super") {
          isIllegal = true;
          return "EXIT";
        }

        if (o.type == "MetaProperty") {
          isIllegal = true;
          return "EXIT";
        }

        if (o.type == "VariableDeclaration" && o.kind !== "var") {
          isIllegal = true;
          return "EXIT";
        }
      });

      if (isIllegal) {
        return;
      }

      if (illegal.size) {
        return;
      }

      illegal.forEach(name => {
        defined.delete(name);
      });
      defined.forEach(name => {
        references.delete(name);
        modified.delete(name);
      }); // console.log(object.id.name, illegal, references);

      var input = Array.from(new Set([...modified, ...references]));

      if (Array.from(input).find(x => !definedAbove.has(x))) {
        return;
      }

      var output = Array.from(modified);
      var newName = this.gen.generate();
      var valName = this.getPlaceholder();
      var resultName = this.getPlaceholder();
      var propName = this.gen.generate();
      (0, _insert.getBlockBody)(object.body).push((0, _gen.ReturnStatement)());
      (0, _traverse.walk)(object.body, [object, ...parents], (o, p) => {
        return () => {
          if (o.type == "ReturnStatement" && (0, _insert.getVarContext)(o, p) === object) {
            var elements = output.map(_gen.Identifier);

            if (o.argument && !(o.argument.type == "Identifier" && o.argument.name == "undefined")) {
              elements.unshift((0, _insert.clone)(o.argument));
            }

            o.argument = (0, _gen.ArrayExpression)(elements);
            o.argument = (0, _gen.AssignmentExpression)("=", (0, _gen.MemberExpression)((0, _gen.Identifier)(resultName), (0, _gen.Identifier)(propName), false), o.argument);
          }
        };
      });
      var newBody = (0, _insert.getBlockBody)(object.body);
      newBody.unshift((0, _gen.VariableDeclaration)((0, _gen.VariableDeclarator)((0, _gen.ArrayPattern)([(0, _gen.ArrayPattern)(input.map(_gen.Identifier)), (0, _gen.ArrayPattern)((0, _insert.clone)(object.params)), (0, _gen.Identifier)(resultName)]), (0, _gen.Identifier)(valName))));

      if (!this.flatMapName) {
        this.flatMapName = this.getPlaceholder();
        (0, _insert.prepend)(parents[parents.length - 1], (0, _gen.VariableDeclaration)((0, _gen.VariableDeclarator)(this.flatMapName, this.flatNode = (0, _gen.ObjectExpression)([]))));
      }

      var newFunctionExpression = (0, _gen.FunctionExpression)([(0, _gen.Identifier)(valName)], newBody);
      newFunctionExpression.async = !!object.async;
      newFunctionExpression.generator = !!object.generator;
      var property = (0, _gen.Property)((0, _gen.Identifier)(newName), newFunctionExpression, false);
      property.kind = "set";
      this.flatNode.properties.push(property);
      var identifier = (0, _gen.MemberExpression)((0, _gen.Identifier)(this.flatMapName), (0, _gen.Identifier)(newName), false);
      var newParamNodes = object.params.map(() => (0, _gen.Identifier)(this.getPlaceholder())); // var result = newFn.call([...refs], ...arguments)

      var call = (0, _gen.VariableDeclaration)([(0, _gen.VariableDeclarator)(resultName, (0, _gen.ArrayExpression)([])), (0, _gen.VariableDeclarator)("_", (0, _gen.AssignmentExpression)("=", identifier, (0, _gen.ArrayExpression)([(0, _gen.ArrayExpression)(input.map(_gen.Identifier)), (0, _gen.ArrayExpression)([...newParamNodes]), (0, _gen.Identifier)(resultName)])))]); // result.pop()

      var pop = (0, _gen.CallExpression)((0, _gen.MemberExpression)((0, _gen.MemberExpression)((0, _gen.Identifier)(resultName), (0, _gen.Identifier)(propName), false), (0, _gen.Identifier)("pop"), false), []); // var result = newFn.call([...refs], ...arguments)
      // modified1 = result.pop();
      // modified2 = result.pop();
      // ...modifiedN = result.pop();...
      //
      // return result.pop()

      var newObjectBody = [call];
      var outputReversed = [...output].reverse(); // DECOY STATEMENTS

      var decoyKey = this.gen.generate();
      var decoyNodes = [(0, _gen.IfStatement)((0, _gen.MemberExpression)((0, _gen.Identifier)(resultName), (0, _gen.Identifier)(this.gen.generate()), false), [(0, _gen.ThrowStatement)((0, _gen.NewExpression)((0, _gen.Identifier)("Error"), [(0, _gen.Literal)(this.getPlaceholder())]))]), (0, _gen.IfStatement)((0, _gen.MemberExpression)((0, _gen.Identifier)(resultName), (0, _gen.Identifier)(this.gen.generate()), false), [(0, _gen.ReturnStatement)((0, _gen.Identifier)(resultName))]), (0, _gen.IfStatement)((0, _gen.MemberExpression)((0, _gen.Identifier)(resultName), (0, _gen.Identifier)(this.gen.generate()), false), [(0, _gen.ReturnStatement)((0, _gen.Identifier)(resultName))]), (0, _gen.IfStatement)((0, _gen.MemberExpression)((0, _gen.Identifier)(resultName), (0, _gen.Identifier)(decoyKey), false), [(0, _gen.ReturnStatement)((0, _gen.MemberExpression)((0, _gen.Identifier)(resultName), (0, _gen.Identifier)(decoyKey), false))]), (0, _gen.IfStatement)((0, _gen.MemberExpression)((0, _gen.Identifier)(resultName), (0, _gen.Identifier)(this.gen.generate()), false), [(0, _gen.ReturnStatement)((0, _gen.MemberExpression)((0, _gen.Identifier)(resultName), (0, _gen.Identifier)(this.gen.generate()), false))])];
      (0, _random.shuffle)(decoyNodes);
      decoyNodes.forEach(decoyNode => {
        if (Math.random() < 0.5) {
          newObjectBody.push(decoyNode);
        }
      });
      newObjectBody.push(...outputReversed.map(name => {
        return (0, _gen.ExpressionStatement)((0, _gen.AssignmentExpression)("=", (0, _gen.Identifier)(name), (0, _insert.clone)(pop)));
      }), (0, _gen.ReturnStatement)((0, _insert.clone)(pop)));
      object.body = (0, _gen.BlockStatement)(newObjectBody);
      object.params = newParamNodes;
    };
  }

}

exports.default = Flatten;