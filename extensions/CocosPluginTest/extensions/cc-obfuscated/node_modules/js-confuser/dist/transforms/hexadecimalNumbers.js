"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _transform = _interopRequireDefault(require("./transform"));

var _order = require("../order");

var _gen = require("../util/gen");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class HexadecimalNumbers extends _transform.default {
  constructor(o) {
    super(o, _order.ObfuscateOrder.HexadecimalNumbers);
  }

  match(object, parents) {
    return object.type === "Literal" && typeof object.value === "number" && Math.floor(object.value) === object.value;
  }

  transform(object, parents) {
    return () => {
      // Technically, a Literal will never be negative because it's supposed to be inside a UnaryExpression with a "-" operator.
      // This code handles it regardless
      var isNegative = object.value < 0;
      var hex = Math.abs(object.value).toString(16);
      var newStr = (isNegative ? "-" : "") + "0x" + hex;
      this.replace(object, (0, _gen.Identifier)(newStr));
    };
  }

}

exports.default = HexadecimalNumbers;