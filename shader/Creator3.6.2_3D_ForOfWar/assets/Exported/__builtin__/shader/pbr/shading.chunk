#include <common/common-define>
#include <builtin/uniforms/cc-global>
#include <builtin/uniforms/cc-shadow>
#if CC_SUPPORT_CASCADED_SHADOW_MAP
  #include <builtin/uniforms/cc-csm>
#endif


#if CC_RECEIVE_SHADOW
  #include <legacy/shadow-map-fs>
#endif


float GGXMobile (float roughness, float NoH, vec3 H, vec3 N) {
  vec3 NxH = cross(N, H);
  float OneMinusNoHSqr = dot(NxH, NxH);
  float a = roughness * roughness;
  float n = NoH * a;
  float p = a / (OneMinusNoHSqr + n * n);
  return p * p;
}

float CalcSpecular (float roughness, float NoH, vec3 H, vec3 N) {
  return (roughness*0.25 + 0.25) * GGXMobile(roughness, NoH, H, N);
}

vec3 BRDFApprox (vec3 specular, float roughness, float NoV) {
  const vec4 c0 = vec4(-1.0, -0.0275, -0.572, 0.022);
  const vec4 c1 = vec4(1.0, 0.0425, 1.04, -0.04);
  vec4 r = roughness * c0 + c1;
  float a004 = min( r.x * r.x, exp2( -9.28 * NoV ) ) * r.x + r.y;
  vec2 AB = vec2( -1.04, 1.04 ) * a004 + r.zw;
  AB.y *= clamp(50.0 * specular.g, 0.0, 1.0);
  return specular * AB.x + AB.y;
}

struct StandardSurface {
  // albedo
  vec4 albedo;
  // these two need to be in the same coordinate system
  vec3 position;
  vec3 normal;
  // emissive
  vec3 emissive;
  // light map
  vec4 lightmap;
  // PBR params
  float roughness;
  float metallic;
  float occlusion;
  float specularIntensity;
  #if CC_RECEIVE_SHADOW
    vec2 shadowBias;
  #endif
};

#include <./brdf>

#include <common/color/gamma>

#if CC_FORWARD_ADD
  #include <legacy/lighting>
  vec4 CCStandardShading (StandardSurface s) {
    vec3 finalColor = vec3(0.0);

    GI gi = fragGI(s);

    for (int i = 0; i < LIGHTS_PER_PASS; i++) {
      vec3 SLU = cc_lightPos[i].xyz - s.position;
      vec3 SL = normalize(SLU);
      float SNL = max(dot(gi.giInput.normal, SL), 0.001);

      gi.giInput.halfDir = normalize(SL + gi.giInput.view);

      gi.light.color = cc_lightColor[i].rgb * cc_lightColor[i].w;
      gi.light.direction = SL;

      // float distSqr = dot(SLU, SLU);
      // float litRadius = cc_lightSizeRangeAngle[i].x;
      // float litRadiusSqr = litRadius * litRadius;
      // float illum = PI * (litRadiusSqr / max(litRadiusSqr , distSqr));
      // float attRadiusSqrInv = 1.0 / max(cc_lightSizeRangeAngle[i].y, 0.01);
      // attRadiusSqrInv *= attRadiusSqrInv;
      // float att = GetDistAtt(distSqr, attRadiusSqrInv);

      float litRadius = cc_lightSizeRangeAngle[i].y;
      float att = max(0., 1. - length(SLU) / litRadius);
      att *= att;

      float illum = 1.;

      // if (cc_lightPos[i].w > 0.0) {
      //   float cosInner = max(dot(-cc_lightDir[i].xyz, SL), 0.01);
      //   float cosOuter = cc_lightSizeRangeAngle[i].z;
      //   float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);
      //   float litAngleOffset = -cosOuter * litAngleScale;
      //   att *= GetAngleAtt(SL, -cc_lightDir[i].xyz, litAngleScale, litAngleOffset);
      // }

    // #if CC_RECEIVE_SHADOW
    //   if (cc_lightPos[i].w > 0.0) {
    //       CC_DIR_SHADOW_FACTOR(lightColor);
    //   }
    // #endif

      finalColor += illum * att * SNL * BRDF(s, gi);
    }

    finalColor = finalColor * s.occlusion;

    return vec4(finalColor, 0.0);
  }
#else
  vec4 CCStandardShading (StandardSurface s) {
    GI gi = fragGI(s);

    // gi.indirect.diffuse = vec3(0.);
    // gi.indirect.specular = vec3(0.);

    // vec3 finalColor = BRDFMobile(s, diffuse, N, L, H, V, NV, NH, NL);
    vec3 finalColor = BRDF(s, gi);

    // float fAmb = 0.5 - N.y * 0.5;
    // #if CC_USE_LIGHTMAP && !CC_FORWARD_ADD
    //   vec3 skyColor = mix(cc_ambientGround.rgb, cc_ambientSky.rgb, s.lightmap.rgb);
    //   skyColor = s.lightmap.a * skyColor + (1.0 - s.lightmap.a) * cc_ambientSky.rgb;
    //   vec3 ambDiff = mix(skyColor, cc_ambientGround.rgb, fAmb) * cc_ambientSky.w;
    // #else
    //   vec3 ambDiff = mix(cc_ambientSky.rgb, cc_ambientGround.rgb, fAmb) * cc_ambientSky.w;
    // #endif
    // finalColor += (ambDiff.rgb * diffuse);

    finalColor = finalColor * s.occlusion;

    finalColor += s.emissive;

    float shadow = 1.0;
    #if CC_RECEIVE_SHADOW
      float NL = max(dot(gi.giInput.normal, gi.light.direction), 0.001);
      if (NL > 0.0 && cc_mainLitDir.w > 0.0) {
       shadow = CCShadowFactorBase(CC_SHADOW_POSITION, gi.giInput.normal, s.shadowBias);
      }

      finalColor *= shadow;
    #endif

    return vec4(finalColor, s.albedo.a);
  }
#endif
