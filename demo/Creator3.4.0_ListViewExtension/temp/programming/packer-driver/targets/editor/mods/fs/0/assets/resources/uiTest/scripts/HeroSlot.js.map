{"version":3,"sources":["file:///F:/GitHub/ZheFengZhang/CococsCreator%20public%20technology%20solutions/demo/Creator3.4.0_ScrollviewExtension/assets/resources/uiTest/scripts/HeroSlot.ts"],"names":["_decorator","Component","SpriteFrame","Label","Sprite","ccclass","property","getRandomInt","min","max","ratio","Math","random","floor","HeroSlot","onLoad","refresh","refreshStars","count"],"mappings":";;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;AAAWC,MAAAA,W,OAAAA,W;AAAaC,MAAAA,K,OAAAA,K;AAAOC,MAAAA,M,OAAAA,M;;;;;;;OAC9C;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBN,U;;AAExBO,MAAAA,Y,GAAe,UAAUC,GAAV,EAAeC,GAAf,EAAoB;AACrC,YAAIC,KAAK,GAAGC,IAAI,CAACC,MAAL,EAAZ;AACA,eAAOJ,GAAG,GAAGG,IAAI,CAACE,KAAL,CAAW,CAACJ,GAAG,GAAGD,GAAP,IAAcE,KAAzB,CAAb;AACH,O;;0BAEYI,Q,WADZT,OAAO,CAAC,UAAD,C,UAEHC,QAAQ,CAAC,CAACJ,WAAD,CAAD,C,UAERI,QAAQ,CAAC,CAACJ,WAAD,CAAD,C,UAERI,QAAQ,CAAC,CAACJ,WAAD,CAAD,C,UAERI,QAAQ,CAAC,CAACJ,WAAD,CAAD,C,UAERI,QAAQ,CAACH,KAAD,C,UAERG,QAAQ,CAACF,MAAD,C,UAERE,QAAQ,CAACF,MAAD,C,UAERE,QAAQ,CAACF,MAAD,C,WAERE,QAAQ,CAACF,MAAD,C,WAERE,QAAQ,CAAC,CAACF,MAAD,CAAD,C,oCApBb,MACaU,QADb,SAC8Bb,SAD9B,CACwC;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAsBpCc,QAAAA,MAAM,GAAI,CACN;AACH;;AAEDC,QAAAA,OAAO,GAAI,CACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH;;AAEDC,QAAAA,YAAY,CAAEC,KAAF,EAAc,CACtB;AACA;AACA;AACA;AACH;;AA9CmC,O;;;;;iBAED,E;;;;;;;iBAEL,E;;;;;;;iBAEC,E;;;;;;;iBAEC,E;;;;;;;iBAEL,M;;;;;;;iBAEH,M;;;;;;;iBAEA,M;;;;;;;iBAEK,M;;;;;;;iBAEH,M;;;;;;;iBAED,E;;;AA+B7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { _decorator, Component, SpriteFrame, Label, Sprite } from 'cc';\nconst { ccclass, property } = _decorator;\n\nconst getRandomInt = function (min, max) {\n    let ratio = Math.random();\n    return min + Math.floor((max - min) * ratio);\n};\n@ccclass('HeroSlot')\nexport class HeroSlot extends Component {\n    @property([SpriteFrame])\n    public sfAttributes: SpriteFrame = [];\n    @property([SpriteFrame])\n    public sfRanks: SpriteFrame = [];\n    @property([SpriteFrame])\n    public sfHeroes: SpriteFrame = [];\n    @property([SpriteFrame])\n    public sfBorders: SpriteFrame = [];\n    @property(Label)\n    public labelLevel: Label = 'null';\n    @property(Sprite)\n    public spHero: Sprite = 'null';\n    @property(Sprite)\n    public spRank: Sprite = 'null';\n    @property(Sprite)\n    public spAttribute: Sprite = 'null';\n    @property(Sprite)\n    public spBorder: Sprite = 'null';\n    @property([Sprite])\n    public spStars: Sprite = [];\n\n    onLoad () {\n        //this.refresh();\n    }\n\n    refresh () {\n        //let bgIdx = getRandomInt(0, this.sfBorders.length);\n        //let heroIdx = getRandomInt(0, this.sfHeroes.length);\n        //let starIdx = getRandomInt(0, this.spStars.length);\n        //let rankIdx = getRandomInt(0, this.sfRanks.length);\n        //let attIdx = getRandomInt(0, this.sfAttributes.length);\n        //let levelIdx = getRandomInt(0, 100);\n        //this.labelLevel.string = 'LV.' + levelIdx;\n        //this.spRank.spriteFrame = this.sfRanks[rankIdx];\n        //this.refreshStars(starIdx);\n        //this.spBorder.spriteFrame = this.sfBorders[bgIdx];\n        //this.spAttribute.spriteFrame = this.sfAttributes[attIdx];\n        //this.spHero.spriteFrame = this.sfHeroes[heroIdx];\n    }\n\n    refreshStars (count: any) {\n        //for (let i = 0; i < this.spStars.length; ++i) {\n        //    if (i <= count) this.spStars[i].enabled = true;\n        //    else this.spStars[i].enabled = false;\n        //}\n    }\n\n}\n\n\n/**\n * 注意：已把原脚本注释，由于脚本变动过大，转换的时候可能有遗落，需要自行手动转换\n */\n// const getRandomInt = function (min, max) {\r\n//     var ratio = Math.random();\r\n//     return min + Math.floor((max - min) * ratio);\r\n// };\r\n// \r\n// cc.Class({\r\n//     extends: cc.Component,\r\n// \r\n//     properties: {\r\n//         sfAttributes: {\r\n//             default: [],\r\n//             type: cc.SpriteFrame\r\n//         },\r\n//         sfRanks: {\r\n//             default: [],\r\n//             type: cc.SpriteFrame\r\n//         },\r\n//         sfHeroes: {\r\n//             default: [],\r\n//             type: cc.SpriteFrame\r\n//         },\r\n//         sfBorders: {\r\n//             default: [],\r\n//             type: cc.SpriteFrame\r\n//         },\r\n//         labelLevel: {\r\n//             default: null,\r\n//             type: cc.Label\r\n//         },\r\n//         spHero: {\r\n//             default: null,\r\n//             type: cc.Sprite\r\n//         },\r\n//         spRank: {\r\n//             default: null,\r\n//             type: cc.Sprite\r\n//         },\r\n//         spAttribute: {\r\n//             default: null,\r\n//             type: cc.Sprite\r\n//         },\r\n//         spBorder: {\r\n//             default: null,\r\n//             type: cc.Sprite\r\n//         },\r\n//         spStars: {\r\n//             default: [],\r\n//             type: cc.Sprite\r\n//         },\r\n//     },\r\n// \r\n//     // use this for initialization\r\n//     onLoad: function () {\r\n//         this.refresh();\r\n//     },\r\n// \r\n//     refresh: function () {\r\n//         let bgIdx = getRandomInt(0, this.sfBorders.length);\r\n//         let heroIdx = getRandomInt(0, this.sfHeroes.length);\r\n//         let starIdx = getRandomInt(0, this.spStars.length);\r\n//         let rankIdx = getRandomInt(0, this.sfRanks.length);\r\n//         let attIdx = getRandomInt(0, this.sfAttributes.length);\r\n//         let levelIdx = getRandomInt(0, 100);\r\n//         this.labelLevel.string = 'LV.' + levelIdx;\r\n//         this.spRank.spriteFrame = this.sfRanks[rankIdx];\r\n//         this.refreshStars(starIdx);\r\n//         this.spBorder.spriteFrame = this.sfBorders[bgIdx];\r\n//         this.spAttribute.spriteFrame = this.sfAttributes[attIdx];\r\n//         this.spHero.spriteFrame = this.sfHeroes[heroIdx];\r\n//     },\r\n// \r\n//     refreshStars: function (count) {\r\n//         for (let i = 0; i < this.spStars.length; ++i) {\r\n//             if (i <= count) this.spStars[i].enabled = true;\r\n//             else this.spStars[i].enabled = false;\r\n//         }\r\n//     },\r\n// \r\n//     // called every frame, uncomment this function to activate update callback\r\n//     // update: function (dt) {\r\n// \r\n//     // },\r\n// });\n"]}