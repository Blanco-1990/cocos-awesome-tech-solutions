{"version":3,"sources":["file:///F:/GitHub/ZheFengZhang/CococsCreator%20public%20technology%20solutions/demo/Creator3.4.0_ScrollviewExtension/assets/resources/uiTest/scripts/EnergyCounter.ts"],"names":["_decorator","Component","Label","ProgressBar","ccclass","property","EnergyCounter","onLoad","update","dt"],"mappings":";;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;AAAWC,MAAAA,K,OAAAA,K;AAAOC,MAAAA,W,OAAAA,W;;;;;;;OACjC;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBL,U;;+BAGjBM,a,WADZF,OAAO,CAAC,eAAD,C,UAQHC,QAAQ,CAACH,KAAD,C,UAERG,QAAQ,CAACH,KAAD,C,UAERG,QAAQ,CAACF,WAAD,C,oCAZb,MACaG,aADb,SACmCL,SADnC,CAC6C;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAczCM,QAAAA,MAAM,GAAI,CACN;AACH;;AAEDC,QAAAA,MAAM,CAAEC,EAAF,EAAW,CACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH;;AA9BwC,O,wFACxCJ,Q;;;;;iBACsB,C;;qFACtBA,Q;;;;;iBACmB,C;;uFACnBA,Q;;;;;iBACqB,C;;;;;;;iBAEK,M;;;;;;;iBAEA,M;;;;;;;iBAEO,M;;;AAuBtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { _decorator, Component, Label, ProgressBar } from 'cc';\nconst { ccclass, property } = _decorator;\n\n@ccclass('EnergyCounter')\nexport class EnergyCounter extends Component {\n    @property\n    public timeToRecover = 0;\n    @property\n    public totalCount = 0;\n    @property\n    public currentCount = 0;\n    @property(Label)\n    public labelTimer: Label = 'null';\n    @property(Label)\n    public labelCount: Label = 'null';\n    @property(ProgressBar)\n    public progressBar: ProgressBar = 'null';\n\n    onLoad () {\n        //this.timer = 0;\n    }\n\n    update (dt: any) {\n        //let ratio = this.timer/this.timeToRecover;\n        //this.progressBar.progress = ratio;\n        //if (this.currentCount > this.totalCount) this.currentCount = this.totalCount;\n        //let timeLeft = Math.floor(this.timeToRecover - this.timer);\n        //this.labelCount.string = this.currentCount + '/' + this.totalCount;\n        //this.labelTimer.string = Math.floor(timeLeft/60).toString() + ':' + (timeLeft%60 < 10 ? '0' : '') + timeLeft%60;\n        //this.timer += dt;\n        //if (this.timer >= this.timeToRecover) {\n        //    this.timer = 0;\n        //    this.currentCount++;\n        //}\n    }\n\n}\n\n\n/**\n * 注意：已把原脚本注释，由于脚本变动过大，转换的时候可能有遗落，需要自行手动转换\n */\n// cc.Class({\r\n//     extends: cc.Component,\r\n// \r\n//     properties: {\r\n//         timeToRecover: 0,\r\n//         totalCount: 0,\r\n//         currentCount: 0,\r\n//         labelTimer: {\r\n//             default: null,\r\n//             type: cc.Label\r\n//         },\r\n//         labelCount: {\r\n//             default: null,\r\n//             type: cc.Label\r\n//         },\r\n//         progressBar: {\r\n//             default: null,\r\n//             type: cc.ProgressBar\r\n//         }\r\n//     },\r\n// \r\n//     // use this for initialization\r\n//     onLoad: function () {\r\n//         this.timer = 0;\r\n//     },\r\n// \r\n//     // called every frame, uncomment this function to activate update callback\r\n//     update: function (dt) {\r\n//         let ratio = this.timer/this.timeToRecover;\r\n//         this.progressBar.progress = ratio;\r\n//         if (this.currentCount > this.totalCount) this.currentCount = this.totalCount;\r\n//         let timeLeft = Math.floor(this.timeToRecover - this.timer);\r\n//         this.labelCount.string = this.currentCount + '/' + this.totalCount;\r\n//         this.labelTimer.string = Math.floor(timeLeft/60).toString() + ':' + (timeLeft%60 < 10 ? '0' : '') + timeLeft%60;\r\n//         this.timer += dt;\r\n//         if (this.timer >= this.timeToRecover) {\r\n//             this.timer = 0;\r\n//             this.currentCount++;\r\n//         }\r\n//     },\r\n// });\n"]}