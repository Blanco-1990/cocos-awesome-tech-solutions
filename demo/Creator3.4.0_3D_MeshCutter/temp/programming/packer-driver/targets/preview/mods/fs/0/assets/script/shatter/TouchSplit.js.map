{"version":3,"sources":["file:///Users/zzf520/Documents/GitHub/CococsCreator-public-technology-solutions/demo/Creator3.4.0_3D_MeshCutter/assets/script/shatter/TouchSplit.ts"],"names":["_decorator","Component","Node","Vec3","Mat4","systemEvent","SystemEventType","CameraComponent","geometry","PhysicsSystem","utils","ColliderComponent","BoxColliderComponent","MeshColliderComponent","RigidBodyComponent","MeshRenderer","Mesh","FastHull","ccclass","property","TouchSplit","instance","start","startPos","endPos","on","TOUCH_START","onTouchStart","TOUCH_END","onTouchEnd","touch","near","cameraCom","set","getLocationX","getLocationY","started","line","subtract","screenToWorld","splitMeshs","i","pos","lerp","raycastCount","ray","screenPointToRay","x","y","physicsSystem","raycast","results","raycastResults","forEach","result","splitPlane","plane","fromNormalAndPoint","cross","d","normalize","hitPoint","splitNode","collider","node","splitMesh","some","push","l","length","meshRender","getComponent","modelMesh","mesh","readMesh","minPos","minPosition","maxPos","maxPosition","splitCenter","add","multiplyScalar","splitMaterial","sharedMaterial","splitCollider","hull","localPoint","transformMat4","n","invert","worldMatrix","localNormal","getWorldRS","hullArray","Split","meshData","index","createMesh","calculateBounds","model","addComponent","setMaterial","setScale","scale","setRotation","rotation","setParent","parent","cutOnce","colliderComponent","shape","setCenter","addRig","setPosition","multiply","position","negate","destroy"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, Vec2, Vec3, Mat4, systemEvent, SystemEventType, Touch, CameraComponent, geometry, PhysicsSystem, ModelComponent, instantiate, utils, ColliderComponent, BoxColliderComponent, MeshColliderComponent, RigidBodyComponent, MeshRenderer, Mesh, assetManager, resources, Material } from 'cc';\nimport { FastHull } from './FastHull'\n\nconst { ccclass, property } = _decorator;\n\n@ccclass('TouchSplit')\nexport class TouchSplit extends Component {\n\n    @property(CameraComponent)\n    cameraCom: CameraComponent = null!;\n\n\n    @property\n    cutOnce: boolean = false;\n\n    protected addRig: boolean = false;\n\n    public raycastCount: number = 256;\n\n    protected started: boolean = false;\n    protected startPos: Vec3 = new Vec3();\n    protected endPos: Vec3 = new Vec3();\n\n    protected near: number = 0;\n\n    protected physicsSystem = PhysicsSystem.instance;\n\n    start() {\n        this.startPos = new Vec3(0, 0, 0);\n        this.endPos = new Vec3(0, 0, 0);\n\n        systemEvent.on(SystemEventType.TOUCH_START, this.onTouchStart, this);\n        systemEvent.on(SystemEventType.TOUCH_END, this.onTouchEnd, this);\n    }\n\n    onTouchStart(touch: Touch) {\n\n        this.near = this.cameraCom.near;\n\n        this.startPos.set(touch.getLocationX(), touch.getLocationY(), this.near);\n\n        this.started = true;\n    }\n\n    onTouchEnd(touch: Touch) {\n\n        if (!this.started) return;\n\n        this.started = false;\n\n        this.endPos.set(touch.getLocationX(), touch.getLocationY(), this.near);\n\n        let line = Vec3.subtract(new Vec3(), this.cameraCom.screenToWorld(this.endPos), this.cameraCom.screenToWorld(this.startPos));\n\n\n        let splitMeshs: any[] = [];\n\n        for (let i = 0; i < this.raycastCount; i++) {\n            let pos = Vec3.lerp(new Vec3(), this.startPos, this.endPos, i / this.raycastCount)\n            let ray = this.cameraCom.screenPointToRay(pos.x, pos.y);\n\n            if (this.physicsSystem.raycast(ray)) {\n                let results = this.physicsSystem.raycastResults;\n                results.forEach((result) => {\n                    let splitPlane = geometry.plane.fromNormalAndPoint(new geometry.plane(), Vec3.cross(new Vec3(), line, ray.d).normalize(), result.hitPoint);\n                    let splitNode = result.collider.node;\n                    let splitMesh = { splitNode: splitNode, plane: splitPlane };\n\n                    if (!splitMeshs.some((splitMesh) => splitMesh.splitNode == splitNode)) {\n                        splitMeshs.push(splitMesh);\n                    }\n                })\n            }\n        }\n\n        for (let i = 0, l = splitMeshs.length; i < l; i++) {\n            this.splitMesh(splitMeshs[i].splitNode, splitMeshs[i].plane);\n        }\n\n    }\n\n    splitMesh(splitNode: Node, plane: geometry.plane) {\n        let meshRender = splitNode.getComponent(MeshRenderer);\n        let modelMesh = meshRender?.mesh as Mesh;\n\n        let mesh = utils.readMesh(modelMesh);\n\n        mesh.minPos = modelMesh.minPosition;\n        mesh.maxPos = modelMesh.maxPosition;\n\n        // let splitSize = Vec3.subtract(new Vec3(), mesh.maxPos as Vec3, mesh.minPos as Vec3);\n        let splitCenter = Vec3.add(new Vec3(), mesh.maxPos as Vec3, mesh.minPos as Vec3).multiplyScalar(1 / 2);\n        let splitMaterial = meshRender?.sharedMaterial;\n        let splitCollider = splitNode.getComponent(ColliderComponent)\n\n        let hull = new FastHull(mesh);\n\n\n        let localPoint = Vec3.transformMat4(new Vec3(), plane.n.multiplyScalar(plane.d), Mat4.invert(new Mat4(), splitNode.worldMatrix));\n        let localNormal = Vec3.transformMat4(new Vec3(), plane.n, Mat4.invert(new Mat4(), splitNode.getWorldRS()));\n\n        localNormal.normalize();\n\n        let hullArray = hull.Split(localPoint, localNormal, true);\n\n        hullArray.forEach((meshData, index) => {\n            let mesh = utils.createMesh(meshData, new Mesh(), { calculateBounds: true });;\n            let node = new Node();\n            let model = node.addComponent(MeshRenderer);\n\n            model.mesh = mesh;\n\n            model.setMaterial(splitMaterial!, 0);\n\n            node.setScale(splitNode.scale);\n\n            node.setRotation(splitNode.rotation);\n\n            node.setParent(this.node.parent);\n\n            if (!this.cutOnce) {\n                if (splitCollider instanceof MeshColliderComponent) {\n                    let colliderComponent = node.addComponent(MeshColliderComponent);\n                    colliderComponent.mesh = mesh;\n                }\n                else if (splitCollider instanceof BoxColliderComponent) {\n                    let colliderComponent = node.addComponent(BoxColliderComponent);\n                    colliderComponent.shape.setCenter(splitCenter);\n                }\n            }\n\n            if (this.addRig) {\n                node.addComponent(RigidBodyComponent);\n            }\n            else {\n                if (index == 0) {\n                    node.setPosition(Vec3.transformMat4(new Vec3(), localNormal, Mat4.invert(new Mat4(), splitNode.getWorldRS())).multiply(splitNode.scale).multiplyScalar(0.2).add(splitNode.position));\n                }\n                else {\n                    node.setPosition(Vec3.transformMat4(new Vec3(), Vec3.negate(new Vec3(), localNormal), Mat4.invert(new Mat4(), splitNode.getWorldRS())).multiply(splitNode.scale).multiplyScalar(0.2).add(splitNode.position));\n                }\n            }\n        })\n\n        if (hullArray.length > 0) {\n            splitNode.destroy();\n        }\n\n    }\n\n}\n\n\n\n\n"]}